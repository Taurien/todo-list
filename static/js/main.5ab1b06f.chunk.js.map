{"version":3,"sources":["components/Header.jsx","components/Todo.jsx","components/Loader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","setDisplayStatus","setDisplayStatusHandler","e","target","value","className","onClick","type","Todo","title","status","handleTodo","id","Loader","App","useState","dataAPI","setDataAPI","displayStatus","filteredData","setFilteredData","useEffect","handleDataAPI","a","fetch","response","json","result","todos","slice","filterFunct","filter","el","completed","map","todo","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTA2BeA,EAtBA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBACRC,EAA0B,SAACC,GAE7BF,EAAiBE,EAAEC,OAAOC,QAG9B,OACI,gCACI,qBAAKC,UAAU,eAAf,SACI,uBAAOC,QAASL,EAAyBM,KAAK,SAASH,MAAM,UAGjE,uCAEA,sBAAKC,UAAU,gBAAf,UACI,uBAAOC,QAASL,EAAyBM,KAAK,SAASH,MAAM,cAC7D,uBAAOE,QAASL,EAAyBM,KAAK,SAASH,MAAM,uBCF9DI,G,MAfF,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,WAAYC,EAAQ,EAARA,GACzC,OACE,sBAAKP,UAAU,cAAf,UAGE,+BAAOI,IAEP,wBAAQH,QAAS,kBAAMK,EAAWC,IAAlC,SACGF,EAAS,YAAc,uBCFjBG,EARA,WACX,OACI,qBAAKR,UAAU,SAAf,SACI,8CCqFGS,MA/Ef,WAGE,MAAgCC,mBAAS,IAAzC,mBAAQC,EAAR,KAAiBC,EAAjB,KACA,EAA4CF,mBAAS,OAArD,mBAAQG,EAAR,KAAuBlB,EAAvB,KACA,EAA0Ce,mBAAS,IAAnD,mBAAQI,EAAR,KAAsBC,EAAtB,KAGAC,qBAAW,WACT,IAAMC,EAAa,uCAAG,gCAAAC,EAAA,sEACGC,MAAM,8CADT,cACdC,EADc,gBAECA,EAASC,OAFV,OAEdC,EAFc,OAGdC,EAAQD,EAAOE,MAAM,EAAE,IAE7BZ,EAAWW,GALS,2CAAH,qDAQnBN,MACC,IAEHD,qBAAU,WACRS,MACC,CAACd,EAASE,IAEb,IAAMY,EAAc,WAClB,OAAOZ,GACL,IAAK,YACHE,EAAgBJ,EAAQe,QAAO,SAAAC,GAAE,OAAqB,IAAjBA,EAAGC,cACxC,MACF,IAAK,cACHb,EAAgBJ,EAAQe,QAAO,SAAAC,GAAE,OAAqB,IAAjBA,EAAGC,cACxC,MACF,QACEb,EAAgBJ,KAKhBL,EAAa,SAACC,GAGlBK,EAAWD,EAAQkB,KAAI,SAAAC,GAAI,OAAIA,EAAKvB,KAAOA,EAAZ,2BACzBuB,GADyB,IACnBF,WAAYE,EAAKF,YACzBE,OAMN,OACE,cAAC,IAAD,UACE,sBAAK9B,UAAU,MAAf,UAEE,cAAC,EAAD,CACEL,iBAAkBA,IAEpB,qBAAKK,UAAU,iBAAf,SAEIW,EACEG,EAAae,KAAK,SAAEC,EAAMC,GAAR,OAChB,cAAC,EAAD,CAEE3B,MAAO0B,EAAK1B,MACZC,OAAQyB,EAAKF,UACbtB,WAAYA,EACZC,GAAIuB,EAAKvB,IAJJwB,MAQT,cAAC,EAAD,YCpECC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5ab1b06f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//Style\r\nimport '../styles/Header.style.scss'\r\n\r\nconst Header = ({ setDisplayStatus }) => {\r\n    const setDisplayStatusHandler = (e) => {\r\n        //console.log(e.target.value)\r\n        setDisplayStatus(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <div className='left ctn-btn'>\r\n                <input onClick={setDisplayStatusHandler} type=\"submit\" value='all' />\r\n            </div>\r\n            \r\n            <h1>Tasks</h1>\r\n\r\n            <div className='right ctn-btn'>\r\n                <input onClick={setDisplayStatusHandler} type=\"submit\" value='completed' />\r\n                <input onClick={setDisplayStatusHandler} type=\"submit\" value='uncompleted' />\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nimport '../styles/Todo.style.scss'\r\n\r\nconst Todo = ({ title, status, handleTodo, id}) => {\r\n  return (\r\n    <div className='single-todo'>\r\n      {/*<span>{id}</span>*/}\r\n      \r\n      <span>{title}</span>\r\n\r\n      <button onClick={() => handleTodo(id)}>\r\n        {status ? \"Completed\" : \"Not completed\"}\r\n      </button>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react'\r\n\r\nconst Loader = () => {\r\n    return  (\r\n        <div className='Loader'>\r\n            <p>Loading...</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React, { useState, useEffect } from 'react';\n\nimport Div100vh from 'react-div-100vh'\n\nimport './styles/App.scss'\n\n//components\nimport Header from './components/Header'\nimport Todo from './components/Todo';\nimport Loader from './components/Loader'\n\nfunction App() {\n  \n  //Hooks\n  const [ dataAPI, setDataAPI ] = useState([])\n  const [ displayStatus, setDisplayStatus ] = useState('all')\n  const [ filteredData, setFilteredData ] = useState([])\n\n  //State\n  useEffect( () => {\n    const handleDataAPI = async () => {\n      const response = await fetch('https://jsonplaceholder.typicode.com/todos')\n      const result = await response.json()\n      const todos = result.slice(0,20)\n      //console.log(todos)\n      setDataAPI(todos)\n    }\n\n    handleDataAPI()\n  }, [])\n\n  useEffect(() => {\n    filterFunct()\n  }, [dataAPI, displayStatus])\n\n  const filterFunct = () => {\n    switch(displayStatus) {\n      case 'completed' :\n        setFilteredData(dataAPI.filter(el => el.completed === true))\n        break;\n      case 'uncompleted' :\n        setFilteredData(dataAPI.filter(el => el.completed !== true))\n        break;\n      default:\n        setFilteredData(dataAPI)\n        break;\n    }\n  }\n  \n  const handleTodo = (id) => {\n    //console.log(dataAPI)\n    //console.log(id)\n    setDataAPI(dataAPI.map(todo => todo.id === id ? \n      {...todo, completed: !todo.completed}\n      : todo\n      ))\n  }\n\n\n//console.log(dataAPI)\n  return (\n    <Div100vh>\n      <div className=\"App\">\n        \n        <Header\n          setDisplayStatus={setDisplayStatus}\n        /> \n        <div className='todo-container'>\n          {\n            dataAPI ? (\n              filteredData.map( ( todo, index ) => (\n                <Todo\n                  key={index}\n                  title={todo.title}\n                  status={todo.completed}\n                  handleTodo={handleTodo}\n                  id={todo.id}\n                />\n              ))\n            ) : (\n              <Loader />\n            )\n          }\n        </div>\n\n      </div>\n    </Div100vh>\n  )\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}